{"version":3,"sources":["components/Menu/Menu.jsx","components/Form/FormContact.jsx","components/Modal/Modal.jsx","App.js","reportWebVitals.js","index.js"],"names":["Menu","menuItems","changeName","listItems","map","item","onClick","name","id","matchLetras","matchEmail","matchNumeros","FormContact","modalOpen","initialValues","email","celular","edad","validationSchema","yupObject","shape","yupString","required","matches","min","max","onSubmit","values","setSubmitting","resetForm","data","JSON","stringify","console","log","document","getElementById","reset","props","errors","handleChange","handleSubmit","className","type","defaultValue","onChange","Modal","App","_changeName","setState","stateValue","value","state","items","timeOut","classList","add","setTimeout","remove","this","_modalOpen","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.79c2115c.chunk.js","sourcesContent":["import React from 'react'\n\nconst Menu = ({\n    menuItems,\n    changeName\n    }) => {\n    const listItems = menuItems.map(item =>\n        <li key={item.id}>\n            <button onClick={()=>changeName(item.name)}> {item.name} </button>\n        </li>\n    );\n\n    return (\n        <>\n            <ul>{listItems}</ul>\n        </>\n    );\n}\n\nexport default Menu;","import React from 'react';\nimport { Formik } from 'formik';\nimport { object as yupObject, string as yupString } from \"yup\";\n\nimport './form.css';\n\nconst matchLetras = /^[A-Za-z]/;\nconst matchEmail = /^[^@]+@[^@]+\\.[a-zA-Z]{2,}$/;\nconst matchNumeros = /^\\d+$/;\n\nconst FormContact = ({\n    modalOpen\n    }) => {\n\n        return (\n            <>\n                <Formik\n                    initialValues={{\n                        name: '',\n                        email: '',\n                        celular: '',\n                        edad: ''\n                    }}\n                    validationSchema={yupObject().shape({\n                        name: yupString()\n                        .required('Necesitamos tu Nombre.')\n                        .matches(matchLetras,'Debe ser letras.')\n                        .min(4,'Nombre muy corto.')\n                        .max(40,'Nombre muy largo.'),\n    \n                        email: yupString()\n                        .required('Necesitamos tu email.')\n                        .matches(matchEmail,'Email incorrecto.'),\n    \n                        celular: yupString()\n                        .required('El celular es requerido')\n                        .matches(matchNumeros,'No es un número.')\n                        .min(10,'Te faltan números.')\n                        .max(12,'Te sobran números.'),\n    \n                        edad: yupString()\n                        .required('La edad es requerida')\n                        .matches(/^((100)|([2-9][0-9]{1})|(1[8-9]))$/,'No tienes la edad.')\n                    })}\n                    /*\n                    onSubmit={async values => {\n                        const data = JSON.stringify(values, null, 2);\n                        console.log(data);\n                        modalOpen(5000);\n                        resetForm({\n                            values: { name: 'Custom initial values', email: '' },\n                        });\n                    }}\n                    */\n                    onSubmit={(values, { setSubmitting, resetForm }) => {\n                        const data = JSON.stringify(values, null, 2);\n                        console.log(data);\n                        modalOpen(5000);\n                        resetForm();\n                        document.getElementById(\"formContact\").reset();\n                        //resetForm ({});\n                    }}\n                >\n                    {\n                        props => {\n                            const {\n                                values,\n                                errors,\n                                handleChange,\n                                handleSubmit,\n                                resetForm\n                            } = props;\n                            return(\n                                <form id='formContact' onSubmit={handleSubmit} className='form'>\n                                    <div>\n                                        <label>Name:</label>\n                                        <input\n                                            type=\"text\"\n                                            defaultValue={values.name}\n                                            onChange={handleChange}\n                                            id=\"name\"\n                                            name=\"name\"\n                                        />\n                                        {errors.name ? <div className=\"error\">{errors.name}</div> : null}\n                                    </div>\n    \n                                    <div>\n                                        <label>Email:</label>\n                                        <input\n                                            type=\"text\"\n                                            defaultValue={values.email}\n                                            onChange={handleChange}\n                                            id=\"email\"\n                                            name=\"email\"\n                                        />\n                                        {errors.email ? <div className=\"error\">{errors.email}</div> : null}                                    \n                                    </div>\n    \n                                    <div>\n                                        <label>Celular:</label>\n                                        <input\n                                            type=\"text\"\n                                            defaultValue={values.celular}\n                                            onChange={handleChange}\n                                            id=\"celular\"\n                                            name=\"celular\"\n                                        />\n                                        {errors.celular ? <div className=\"error\">{errors.celular}</div> : null}\n                                    </div>\n    \n                                    <div>\n                                        <label>Edad:</label>\n                                        <input\n                                            type=\"text\"\n                                            defaultValue={values.edad}\n                                            onChange={handleChange}\n                                            id=\"edad\"\n                                            name=\"edad\"\n                                        />\n                                        {errors.edad ? <div className=\"error\">{errors.edad}</div> : null}                                    \n                                    </div>\n    \n                                    <div>\n                                        <button type=\"submit\">Enviar</button>\n                                        <button type=\"reset\" onClick={resetForm} className='esconde'>\n                                            Reset All\n                                        </button>\n                                    </div>\n                                </form>\n                            )\n                        }\n                    }\n                </Formik>\n            </>\n        );\n}\n\nexport default FormContact;","import React from 'react'\n\nimport './modal.css';\n\nconst Modal = () => {\n    return (\n        <>\n            <div id='modal' className='modal ancho1'>\n                <div>\n                    <p>Tu información fue enviada con éxito, estaremos en contacto contigo.</p>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Modal;","import React from 'react'\n\nimport './App.css';\nimport Menu from './components/Menu/Menu'\nimport FormContact from './components/Form/FormContact'\nimport Modal from './components/Modal/Modal'\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      stateValue: false,\n      value: '',\n      items: [\n        {\n          id: 1,\n          name: \"Vivair\"\n        },\n        {\n          id: 2,\n          name: \"Avianca\"\n        }\n      ],\n    };\n  }\n\n  _changeName = (name) => {\n    this.setState({\n      stateValue: true,\n      value: name,\n    })\n  }\n\n  _modalOpen(timeOut) {\n    document.getElementById('modal').classList.add('show');\n\n    setTimeout(() => {\n      document.getElementById('modal').classList.remove('show');\n    }, timeOut);\n  }\n\n\n  render(){\n\n    const {\n      value,\n      items,\n      stateValue\n     } = this.state;\n\n    return (\n      <main className='main'>\n        <header className='all menu'>\n          <nav>\n            <Menu\n              menuItems={items}\n              changeName={this._changeName}\n            />\n          </nav>\n        </header>\n        <section>\n          <article className='all cuerpo'>\n            {stateValue ? (\n              <h1>Hola, bienvenido, sabemos que quieres viajar en un {value}</h1>          \n            ) : (\n              <h1>Selecciona la aerolínea.</h1>\n            )}\n          </article>\n          <article>\n            <div className='wrap'>\n              <FormContact\n                modalOpen={this._modalOpen}\n              />\n            </div>\n            <Modal />\n          </article>\n        </section>\n      </main>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}